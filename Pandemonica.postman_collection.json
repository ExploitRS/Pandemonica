{
	"info": {
		"_postman_id": "79d5c5e5-da3e-4ea9-8d3d-474213cdba9e",
		"name": "Pandemonica",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32165614"
	},
	"item": [
		{
			"name": "tasks",
			"item": [
				{
					"name": "tasks / index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of objects with specific properties\", function () {",
									"    var tasks = pm.response.json();",
									"    tasks.forEach(function(task) {",
									"        pm.expect(task).to.be.an('object').that.has.all.keys('id', 'title', 'description', 'due_date', 'is_done', 'created_at', 'updated_at', 'categories');",
									"    });",
									"});",
									"",
									"postman.setNextRequest('tasks / store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "tasks / category ? category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks/?category=",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks",
								""
							],
							"query": [
								{
									"key": "category",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tasks / store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Due date is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.task.due_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Due date is in a valid format\", function () {",
									"  pm.expect(pm.response.json().task.due_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"// Parse the response and set the task id to a global variable",
									"var responseData = pm.response.json();",
									"console.log('begin')",
									"console.log(typeof(responseData))",
									"console.log('end')",
									"pm.globals.set(\"task\", responseData.task);",
									"task = pm.globals.get(\"task\");",
									"pm.globals.set(\"task_id\", task.id)",
									"",
									"postman.setNextRequest('tasks / update')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"hell\",\n\t\"due_date\": \"2024-06-06\",\n    \"description\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "tasks / update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Due date is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.task.due_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Is_done field is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.task.is_done).to.be.a('boolean');",
									"});",
									"",
									"var template = `",
									"<p>Task not found. Please try again.</p>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return {response: pm.response.json()}",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());",
									"",
									"postman.setNextRequest('tasks / show')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"due_date\": \"2045-01-01\",\n\t\"category_ids\": [\n\t\t{\"category_id\": 4}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks/{{task_id}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "tasks / destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ids = pm.globals.get(\"ids\");",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object with a message property\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');",
									"});",
									"",
									"pm.test(\"Test for response. delete successfuly\", function () {",
									"    pm.expect(pm.response.json().message).to.equal(\"The task deleted successfully\");",
									"});",
									"",
									"postman.setNextRequest(null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks/{{task_id}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "tasks / show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Task object should exist and be an object, and contain all expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.task).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.task).to.have.property('id');",
									"    pm.expect(responseData.task).to.have.property('title');",
									"    pm.expect(responseData.task).to.have.property('description');",
									"    pm.expect(responseData.task).to.have.property('due_date');",
									"    pm.expect(responseData.task).to.have.property('is_done');",
									"});",
									"",
									"pm.test(\"Category object should exist and be an object, and contain all expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.category).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.category).to.have.property('id');",
									"    pm.expect(responseData.category).to.have.property('label');",
									"});",
									"",
									"postman.setNextRequest('categories / index')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks/{{task_id}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "## Paths\n\n- /api/todo/tasks/\n- /api/todo/tasks/{task}"
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "categories / index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, label, created_at, updated_at\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('label');",
									"        pm.expect(item).to.have.property('created_at');",
									"        pm.expect(item).to.have.property('updated_at');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Label is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.label).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Label should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"postman.setNextRequest(\"categories / store\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/categories",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "categories / store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('label');",
									"    pm.expect(responseData).to.have.property('updated_at');",
									"    pm.expect(responseData).to.have.property('created_at');",
									"    pm.expect(responseData).to.have.property('id');",
									"});",
									"",
									"",
									"pm.test(\"Label must be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.label).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Label should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"var responseData = pm.response.json();",
									"pm.globals.set(\"category\", responseData)",
									"let category = pm.globals.get(\"category\")",
									"pm.globals.set(\"category_id\", category.id)",
									"",
									"postman.setNextRequest(\"categories / update\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"label\": \"hell gate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:80/api/todo/categories",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "categories / update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('label');",
									"    pm.expect(responseData).to.have.property('created_at');",
									"    pm.expect(responseData).to.have.property('updated_at');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");",
									"});",
									"",
									"postman.setNextRequest(\"categories / show\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"label\": \"steins; gate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:80/api/todo/categories/{{category_id}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "categories / destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Category is deleted from the system\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"postman.setNextRequest(\"tasks / destroy\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:80/api/todo/categories/{{category_id}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "categories / show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, label, created_at, and updated_at\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('label');",
									"    pm.expect(responseData).to.have.property('created_at');",
									"    pm.expect(responseData).to.have.property('updated_at');",
									"});",
									"",
									"",
									"pm.test(\"Label is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.label).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Label should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"postman.setNextRequest(\"tasks / categories / store\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/categories/{{category_id}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "## Paths\n\n- /api/todo/categories/\n- /api/todo/categories/{category}"
		},
		{
			"name": "tasks / categories",
			"item": [
				{
					"name": "tasks / categories / index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Array contains objects with required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('label');",
									"        pm.expect(item).to.have.property('created_at');",
									"        pm.expect(item).to.have.property('updated_at');",
									"        pm.expect(item).to.have.property('pivot');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Pivot object contains task_id and category_id\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(item => {",
									"        pm.expect(item.pivot).to.exist;",
									"        pm.expect(item.pivot.task_id).to.exist;",
									"        pm.expect(item.pivot.category_id).to.exist;",
									"    });",
									"});",
									"",
									"postman.setNextRequest(\"tasks / categories / destroy\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks/{{task_id}}/categories/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks",
								"{{task_id}}",
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "tasks / categories / store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, label, created_at, and updated_at\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.label).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Label is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.label).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Label should not be empty\");",
									"});",
									"",
									"postman.setNextRequest(\"tasks / categories / index\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"category_ids\": [\n        {\"category_id\": 9}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks/{{task_id}}/categories",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks",
								"{{task_id}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "tasks / categories / destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header set to 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"postman.setNextRequest(\"categories / destroy\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "127.0.0.1:80/api/todo/tasks/{{task_id}}/categories/{{category_id}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "80",
							"path": [
								"api",
								"todo",
								"tasks",
								"{{task_id}}",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "## Paths\n\n- /api/todo/tasks/{task}/categories/\n- /api/todo/tasks/{task}/categories/{category}"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let count = pm.environment.get(\"count\");",
					"var ids = Array.from({ length: count }, (_, i) => i + 1);",
					"pm.globals.set(\"ids\", ids);",
					"console.log(ids.splice(1,1))",
					"console.log(ids)",
					"",
					"var task = {};",
					"var task_id = 0;",
					"var category = {};",
					"var category_id = {};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}